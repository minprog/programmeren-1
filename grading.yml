# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatic
        type: pass
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done
        auto_publish: true
        hide_calculated: true
    4: &semiautomatic
        type: float
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done==-1 && 1.5 || 0
        hide_calculated: true
    2: &manual
        type: float
        subgrades:
            points: integer
        calculation: (points / 6.0 * 9 + 1).round(1)
        hide_calculated: true
    3: &check
        type: pass
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true
    5: &exam
        type: float
        subgrades:
            cijfer: float
        calculation: cijfer
        hide_calculated: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:
    scratch: *check
    hello: *automatic
    population: *automatic

    conversion: *automatic
    mario: *automatic
    soda: *automatic
    caffeine: *automatic

    strings: *check
    scrabble: *automatic
    rna: *automatic
    cypher: *automatic

    functions: *check
    tiles: *automatic
    calendar: *automatic

    algorithms: *check
    measurements: *automatic
    sort: *automatic
    big_o: *check
    complexity_puzzle: *check

    beatles: *check
    whodunit: *check
    filter: *automatic

    speller: *automatic
    speller_questions: *check

    goldbach: *semiautomatic
    decryptor: *semiautomatic
    design_challenge: *semiautomatic
    find: *semiautomatic
    resize: *semiautomatic

    basics_variables: *check
    basics_control_flow: *check
    basics_arrays: *check
    basics_functions: *check

    tentamen-oefening-regen: *automatic
    tentamen-oefening-rechthoeken: *automatic
    tentamen-oefening-hoofdletters: *automatic
    tentamen-oefening-driehoek: *automatic

    m2: *manual
    m3: *manual
    m4: *manual
    m5: *manual
    m6: *manual
    m7: *manual

    oefententamen: *check
    tentamen: *exam
    hertentamen: *check

# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    eindcijfer:
        punten: 25
        tentamen: 75
    eindcijfer_herkansing:
        punten: 25
        hertentamen: 75

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

opdrachten_week_1:
    show_progress: true
    submits:
        scratch: 1
        basics_variables: 1
        hello: 1
        basics_control_flow: 1
        population: 1

opdrachten_week_2:
    show_progress: true
    submits:
        conversion: 1
        mario: 1
        soda: 1
        caffeine: 1

opdrachten_week_3:
    show_progress: true
    submits:
        basics_arrays: 1
        strings: 1
        scrabble: 1
        rna: 1
        cypher: 1

opdrachten_week_4:
    show_progress: true
    submits:
        functions: 1
        tiles: 1
        basics_functions: 1
        calendar: 1

opdrachten_week_5:
    show_progress: true
    submits:
        algorithms: 1
        measurements: 1
        sort: 1
        big_o: 1
        # complexity_puzzle: 1

opdrachten_week_6:
    show_progress: true
    submits:
        beatles: 1
        whodunit: 1
        filter: 1

opdrachten_week_7:
    show_progress: true
    submits:
        speller_questions: 1
        speller: 1

punten:
    type: maximum
    show_progress: true
    submits:
        m2: 6
        m4: 6
        m6: 6
    bonus:
        goldbach: 0.3
        decryptor: 0.3
        design_challenge: 0.3
        find: 0.3
        resize: 0.3

bonus:
    show_progress: true
    submits:
        goldbach: 0.16666
        decryptor: 0.16666
        design_challenge: 0.16666
        find: 0.16666
        resize: 0.16666

tentamenoefeningen:
    # show_progress: true
    submits:
        tentamen-oefening-regen: 1
        tentamen-oefening-rechthoeken: 1
        tentamen-oefening-hoofdletters: 1
        tentamen-oefening-driehoek: 1
        oefententamen: 1

tentamen:
    show_progress: true
    required: true
    submits:
        tentamen: 1

hertentamen:
    show_progress: true
    required: true
    submits:
        hertentamen: 1
